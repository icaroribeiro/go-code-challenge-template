// Code generated by mockery v1.0.0. DO NOT EDIT.

package authmock

import (
	auth "github.com/icaroribeiro/new-go-code-challenge-template/internal/core/domain/model/auth"

	jwt "github.com/dgrijalva/jwt-go"

	mock "github.com/stretchr/testify/mock"
)

// AuthMock is an autogenerated mock type for the IAuth type
type AuthMock struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: _a0, tokenExpTimeInSec
func (_m *AuthMock) CreateToken(_a0 auth.Auth, tokenExpTimeInSec int) (string, error) {
	ret := _m.Called(_a0, tokenExpTimeInSec)

	var r0 string
	if rf, ok := ret.Get(0).(func(auth.Auth, int) string); ok {
		r0 = rf(_a0, tokenExpTimeInSec)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.Auth, int) error); ok {
		r1 = rf(_a0, tokenExpTimeInSec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAuth provides a mock function with given fields: token
func (_m *AuthMock) FetchAuth(token *jwt.Token) (auth.Auth, error) {
	ret := _m.Called(token)

	var r0 auth.Auth
	if rf, ok := ret.Get(0).(func(*jwt.Token) auth.Auth); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(auth.Auth)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString, isToRefreshToken, timeBeforeTokenExpTimeInSec
func (_m *AuthMock) VerifyToken(tokenString string, isToRefreshToken bool, timeBeforeTokenExpTimeInSec int) (*jwt.Token, error) {
	ret := _m.Called(tokenString, isToRefreshToken, timeBeforeTokenExpTimeInSec)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, bool, int) *jwt.Token); ok {
		r0 = rf(tokenString, isToRefreshToken, timeBeforeTokenExpTimeInSec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, int) error); ok {
		r1 = rf(tokenString, isToRefreshToken, timeBeforeTokenExpTimeInSec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
